name: Sync

on:
  push:
    paths:
      - '.github/workflows/build-*'
      - main.sh
  workflow_dispatch:
    inputs:
      mirror: 
        type: choice
        required: true
        default: https://nexus.czy21.com/repository/openwrt-download
        options: 
          - https://nexus.czy21.com/repository/openwrt-download
          - https://mirrors.hit.edu.cn/openwrt

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      archs: ${{ steps.set_env.outputs.archs }}
      branchs: ${{ steps.set_env.outputs.branchs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: actions/checkout@v5
        with:
          repository: czy21/share
          path: feeds/share
      - name: Set env
        id: set_env
        run: |
          mv feeds/share/.github/workflows/scripts .github/workflows/
          branchs+=$(echo;git ls-remote origin | sed -n 's|.*\(openwrt-*\)|\1|p' | xargs)

          JSON='['
          FIRST=1
          for BRANCH in $branchs; do
            TUPLE='"'"$(echo $BRANCH | cut -d "/" -f 1)"'"'
            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            JSON="$JSON""$TUPLE"
            FIRST=0
          done
          JSON="$JSON"']'

          echo -e "\n---- branchs ----\n"
          echo "$JSON"
          echo -e "\n---- branchs ----\n"

          echo "branchs=$JSON" >> $GITHUB_OUTPUT

          wget https://downloads.openwrt.org/snapshots/.targets.json -O .targets.json
          python3 -B .github/workflows/scripts/openwrt-get_targets.py | while read v;do echo "$v" >> "$GITHUB_OUTPUT"; done

  plugin-main:
    name: Plugin (main)
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Determine update
        run: bash main.sh update

      - name: Determine changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          if [ -n "$(git status -s)" ];then
            git pull && git add . && git commit -m "CI: sync code" && git push
          fi

  plugin-branch:
    name: Plugin
    needs: [setup,plugin-main]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ${{fromJson(needs.setup.outputs.branchs)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ matrix.branch }}
          token: ${{ secrets.PAT }}
      - uses: actions/checkout@v5
        with:
          path: feeds/main

      - name: Sync main
        run: |
          mkdir -p .github/workflows/
          rm -rfv .github/workflows/scripts
          cp -rfv feeds/main/.github/workflows/build-* .github/workflows/
          cp -rfv feeds/main/main.sh .

      - name: Determine update
        run: bash main.sh update

      - name: Determine changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          if [ -n "$(git status -s)" ];then
            git pull && git add . && git commit -m "CI: sync code" && git push
          fi
          
  mirror:
    name: Mirror
    runs-on: self-hosted
    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
        branch: ${{fromJson(needs.setup.outputs.branchs)}}
        include:
          - branch: main
    container:
      image: openwrt/sdk:x86-64-${{ matrix.branch }}
      volumes:
        - openwrt-sdk-x86-64-${{ matrix.branch }}-${{ github.run_id }}:/builder
        - openwrt-share:/data/
      options: --user root --privileged --pull always
    steps:
      - name: Set env
        id: set_env
        shell: bash
        run: |
          openwrt_branch_number=$(echo ${{ matrix.branch }} | sed 's|openwrt-||')

          artifact_package_rel=releases/packages-${openwrt_branch_number}
          
          if [ "${{ matrix.branch }}" = "main" ];then
            artifact_package_rel=snapshots/packages
          fi

          download_dir=/data/download
          download_package_dir=${download_dir}/$artifact_package_rel

          echo "openwrt_branch_number=${openwrt_branch_number}" >> "$GITHUB_OUTPUT"

          echo "artifact_package_rel=${artifact_package_rel}" >> "$GITHUB_OUTPUT"

          echo "download_dir=${download_dir}" >> "$GITHUB_OUTPUT"
          echo "download_package_dir=${download_package_dir}" >> "$GITHUB_OUTPUT"

      - name: Setup
        working-directory: /builder
        shell: su buildbot -c "bash {0}"
        env: 
          UPSTREAM_URL: ${{ inputs.mirror || 'https://nexus.czy21.com/repository/openwrt-download' }}
        run: |
          set -e

          [ ! -d ./scripts ] && sed -i "s|^sha256sum -c|# \0|" setup.sh && ./setup.sh
          
          make defconfig
          
          mkdir -p ${{ steps.set_env.outputs.download_package_dir }}

      - name: Sync
        working-directory: /builder
        shell: su buildbot -c "bash {0}"
        run: |
          echo 'immortalwrt-org' > rsync-immortalwrt-password
          chmod 600 rsync-immortalwrt-password
          archs="${{ join(fromJson(needs.setup.outputs.archs),' ') }}"
          
          packages=
          packages+="*vlmcsd* "
          packages+="luci-app-openclash* "

          : > include-archs-packages
          for a in $archs;do
            for p in $packages;do
              echo "*/$a/*/$p"
            done
          done >> include-archs-packages

          immortalwrt_dir=${{ steps.set_env.outputs.download_dir }}/immortalwrt
          mkdir -p $immortalwrt_dir

          rsync --password-file=rsync-immortalwrt-password -avmR --include-from=include-archs-packages --include=*/ --exclude=* rsync://firmwarepublic@rsync-mirror.infra.immortalwrt.org/firmware-public/${{ steps.set_env.outputs.artifact_package_rel }} $immortalwrt_dir
          
          for t in $archs;do
            src_arch=${{ steps.set_env.outputs.download_dir }}/immortalwrt/${{ steps.set_env.outputs.artifact_package_rel }}/$t
            [ -d "$src_arch" ] || continue
            dst_arch=${{ steps.set_env.outputs.download_package_dir }}/$t
            plugin_path=$dst_arch/plugin
            mkdir -p $plugin_path
            find $src_arch \( -name "*.ipk" -o -name "*.apk" \) -print0 | while IFS= read -r -d '' src_file;do
              dst_file=$plugin_path/$(basename $src_file)
              rm -rf $dst_file && ln -v $src_file $dst_file
            done
          done

      - name: Generate index
        working-directory: /builder
        shell: su buildbot -c "bash {0}"
        run: |
          if grep -q '^CONFIG_USE_APK=y' .config;then
            ln -snf /data/apk.key private-key.pem
          else
            ln -snf /data/pri.key key-build
          fi

          find ${{ steps.set_env.outputs.download_package_dir }} -mindepth 2 -maxdepth 2 -type d -exec sh -c 'f={};a=$(basename $(dirname $f));echo "Generating index for package $f";make -j6 package/index CONFIG_SIGNED_PACKAGES= CONFIG_TARGET_ARCH_PACKAGES=$a PACKAGE_SUBDIRS=$f V=s' \;

          if grep -q '^CONFIG_USE_APK=y' .config;then
            find ${{ steps.set_env.outputs.download_package_dir }} -name 'packages.adb' -exec /builder/staging_dir/host/bin/apk adbsign --allow-untrusted --reset-signatures --sign-key /data/apk.key {} \;
          fi
          
  clean:
    name: Clean
    runs-on: self-hosted
    needs: [setup,mirror]
    strategy:
      fail-fast: false
      matrix:
        branch: ${{fromJson(needs.setup.outputs.branchs)}}
        include:
          - branch: main
    if: always()
    steps:
      - run: docker volume rm openwrt-sdk-x86-64-${{ matrix.branch }}-${{ github.run_id }} || true