name: Build sub target

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      subtarget:
        required: true
        type: string
      output_image_type:
        type: string

permissions:
  contents: read
  
defaults:
  run:
    shell: bash
  
jobs:
  setup:
    name: Setup ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    steps:
      - name: Set env
        working-directory: /data/openwrt
        run: |
          echo "first_build=`[ -n "$([ -d bin/targets/ ] && find bin/targets/ -type f -name '*${{ inputs.target }}-${{ inputs.subtarget }}*')" ] && echo false || echo true`" >> "$GITHUB_OUTPUT"
          echo "openwrt_version=$(git describe)" >> "$GITHUB_OUTPUT"
          echo "openwrt_output_image_pattern=openwrt*${{ inputs.target }}*${{ inputs.subtarget }}*squashfs*${{ inputs.output_image_type }}*" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Update
        working-directory: /data/openwrt
        run: ./scripts/feeds update -a && ./scripts/feeds install -a && ./feeds/plugin/sync.sh

      - name: Config
        working-directory: /data/openwrt
        run: |
          cp -rv feeds/plugin/config/${{ inputs.target }}/${{ inputs.subtarget }} .config
          [ "${{ needs.setup.outputs.first_build }}" == true ] && sed -i -n '/CONFIG_TARGET/p' .config
          rm -rf tmp && make defconfig

      - name: Download
        working-directory: /data/openwrt
        run: make download -j8

      - name: Compile
        working-directory: /data/openwrt
        run: |
          thread_num=$(($(nproc)+1))
          [ "${{ needs.setup.outputs.first_build }}" == true ] && thread_num=1
          echo -e "${thread_num} thread compile"
          mkdir -p logs
          (make -j${thread_num} || make -j1 V=s) | tee logs/${{ inputs.target }}-${{ inputs.subtarget }}.log

  upload:
    name: Upload ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    needs: build
    if: needs.setup.outputs.first_build == false
    steps:
      - name: Upload to nas
        working-directory: /data/openwrt
        run: |
          remote_user=opsor
          remote_host=dsm.czy21-internal.com
          remote_args="-o StrictHostKeyChecking=no -i /data/.ssh/czy-rsa"
          remote_dir=/volume1/public/developer/linux/routeros/openwrt/${{ needs.setup.outputs.openwrt_version }}
          openwrt_output_image_files=`[ -d "bin/targets/" ] && find bin/targets/ -type f -name "${{ ${{ needs.setup.outputs.openwrt_output_image_pattern }} }}" | xargs`
          if [ -n ${openwrt_output_image_files} ];then
            ssh ${remote_args} ${remote_user}@${remote_host} mkdir -p ${remote_dir}
            scp ${remote_args} -r ${} ${remote_user}@${remote_host}:${remote_dir}
          fi
          

  publish:
    name: Publish ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    needs: build
    if: needs.setup.outputs.first_build == false
    steps:
      - name: Publish to release
        working-directory: /data/openwrt
        run: echo "release to"