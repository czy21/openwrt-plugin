name: Build sub target

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      subtarget:
        required: true
        type: string
      output_image_type:
        type: string

env:
  openwrt_workdir: /data/openwrt

permissions:
  contents: read
  
defaults:
  run:
    shell: bash
  
jobs:
  setup:
    name: Setup ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    outputs:
      output_image_pattern: ${{ steps.set_env.outputs.output_image_pattern }}
      openwrt_branch: ${{ steps.set_env.outputs.openwrt_branch }}
      openwrt_latest_tag: ${{ steps.set_env.outputs.openwrt_latest_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set env
        id: set_env
        run: |
          echo "output_image_pattern=openwrt-*${{ inputs.target }}*${{ inputs.subtarget }}*squashfs*${{ inputs.output_image_type }}*" >> "$GITHUB_OUTPUT"
          echo "openwrt_branch=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "openwrt_latest_tag=`git ls-remote --tags --refs https://github.com/openwrt/openwrt | grep -o "$(echo ${{ github.ref_name }} | sed 's|openwrt-||').*" | sort -r | head -1`" >> "$GITHUB_OUTPUT"
          
  build:
    name: Build ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Checkout openwrt
        run: |
          openwrt_latest_tag=${{ steps.setup.outputs.openwrt_latest_tag }}
          openwrt_local_tag=
          if [ -d "${{ env.openwrt_workdir }}/.git" ];then
            openwrt_local_tag=`cd ${{ env.openwrt_workdir }} && git tag --points-at HEAD`
          fi
          if [ "${openwrt_latest_tag}" != "${openwrt_local_tag}" ];then
            rm -rf ${{ env.openwrt_workdir }}
            git clone http://gitea.czy21-internal.com/openwrt/openwrt.git ${{ env.openwrt_workdir }}
          fi
          cd ${{ env.openwrt_workdir }} && git checkout --force ${openwrt_latest_tag}
          sed -i -e 's|https://git.openwrt.org/\(.*\)/|http://gitea.czy21-internal.com/openwrt/|g' -e "s|\^.*|;${openwrt_branch}|" feeds.conf.default
          echo "
          src-git helloworld https://github.com/fw876/helloworld
          src-git plugin https://github.com/czy21/openwrt-plugin.git;${openwrt_branch}
          " >> feeds.conf.default

      # - name: Update
      #   working-directory: /data/openwrt
      #   run: ./scripts/feeds update -a && ./scripts/feeds install -a && ./feeds/plugin/sync.sh

      # - name: Config
      #   working-directory: /data/openwrt
      #   run: |
      #     cp -rv feeds/plugin/config/${{ inputs.target }}/${{ inputs.subtarget }} .config
      #     rm -rf tmp && make defconfig

      # - name: Download
      #   working-directory: /data/openwrt
      #   run: make download -j8
          
      # - name: Compile
      #   working-directory: /data/openwrt
      #   run: |
      #     mkdir -p logs
      #     (make -j$(($(nproc)+1)) || make -j1 V=s) | tee logs/${{ inputs.target }}-${{ inputs.subtarget }}.log

      # - name: Artifact
      #   working-directory: /data/openwrt
      #   run: |
      #     mkdir -p artifact
      #     find bin/targets/ -type f -name '${{ needs.setup.outputs.output_image_pattern }}' -exec cp -rv {} artifact \;

      # - name: Upload to nas
      #   working-directory: /data/openwrt
      #   run: |
      #     remote_user=opsor
      #     remote_host=dsm.czy21-internal.com
      #     remote_args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /data/.ssh/czy-rsa"
      #     remote_path=/volume1/public/developer/linux/routeros/openwrt/$(git describe)
      #     output_image_files=`find artifact -type f -name '${{ needs.setup.outputs.output_image_pattern }}' | xargs`
      #     ssh ${remote_args} ${remote_user}@${remote_host} mkdir -p ${remote_path}
      #     if [ -n "${output_image_files}" ];then
      #       scp ${remote_args} -r ${output_image_files} ${remote_user}@${remote_host}:${remote_path}
      #     fi