name: Build sub target

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      subtarget:
        required: true
        type: string
      output_image_type:
        type: string

permissions:
  contents: read
  
defaults:
  run:
    shell: bash
  
jobs:
  setup:
    name: Setup ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    outputs:
      output_image_pattern: ${{ steps.set_env.outputs.output_image_pattern }}
    steps:
      - name: Set env
        id: set_env
        working-directory: /data/openwrt
        run: |
          echo "output_image_pattern=openwrt-*${{ inputs.target }}*${{ inputs.subtarget }}*squashfs*${{ inputs.output_image_type }}*" >> "$GITHUB_OUTPUT"
  build:
    name: Build ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Update
        working-directory: /data/openwrt
        run: ./scripts/feeds update -a && ./scripts/feeds install -a && ./feeds/plugin/sync.sh

      - name: Config
        working-directory: /data/openwrt
        run: |
          cp -rv feeds/plugin/config/${{ inputs.target }}/${{ inputs.subtarget }} .config
          rm -rf tmp && make defconfig

      - name: Download
        working-directory: /data/openwrt
        run: make download -j8
          
      - name: Compile
        working-directory: /data/openwrt
        run: |
          mkdir -p logs
          (make -j$(($(nproc)+1)) || make -j1 V=s) | tee logs/${{ inputs.target }}-${{ inputs.subtarget }}.log

      - name: Artifact
        working-directory: /data/openwrt
        run: |
          mkdir -p artifact
          find bin/targets/ -type f -name '${{ needs.setup.outputs.output_image_pattern }}' -exec cp -rv {} artifact \;

      - name: Upload to nas
        working-directory: /data/openwrt
        run: |
          remote_user=opsor
          remote_host=dsm.czy21-internal.com
          remote_args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /data/.ssh/czy-rsa"
          remote_path=/volume1/public/developer/linux/routeros/openwrt/$(git describe)
          output_image_files=`find artifact -type f -name '${{ needs.setup.outputs.output_image_pattern }}' | xargs`
          ssh ${remote_args} ${remote_user}@${remote_host} mkdir -p ${remote_path}
          if [ -n "${output_image_files}" ];then
            scp ${remote_args} -r ${output_image_files} ${remote_user}@${remote_host}:${remote_path}
          fi