name: Build sub target

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      subtarget:
        required: true
        type: string
      output_image_type:
        type: string
      first_build:
        type: boolean

permissions:
  contents: read
  
defaults:
  run:
    shell: bash
  
jobs:
  build:
    name: Build ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Update
        working-directory: /data/openwrt
        run: ./scripts/feeds update -a && ./scripts/feeds install -a && ./feeds/plugin/sync.sh

      - name: Config
        working-directory: /data/openwrt
        run: |
          cp -rv feeds/plugin/config/${{ inputs.target }}/${{ inputs.subtarget }} .config
          [ "${{ inputs.first_build }}" == true ] && sed -i -n '/CONFIG_TARGET/p' .config
          rm -rf tmp && make defconfig

      - name: Download
        working-directory: /data/openwrt
        run: make download -j8

      - name: Compile
        working-directory: /data/openwrt
        run: |
          thread_num=$(($(nproc)+1))
          [ "${{ inputs.first_build }}" == true ] && thread_num=1
          echo -e "${thread_num} thread compile"
          mkdir -p logs
          (make -j${thread_num} || make -j1 V=s) | tee logs/${{ inputs.target }}-${{ inputs.subtarget }}.log
          
      - name: Artifact
        working-directory: /data/openwrt
        run: |
          openwrt_artifact=artifact/${openwrt_version} && mkdir -p ${openwrt_artifact}
          find bin/targets/ -type f -name "openwrt*${{ inputs.target }}*${{ inputs.subtarget }}*squashfs*${{ inputs.output_image_type }}*" -exec cp {} ${openwrt_artifact} \;

  upload:
    runs-on: self-hosted
    needs: build
    if: ${{ always() }}
    steps:
      - name: Upload to nas
        working-directory: /data/openwrt
        run: scp -o StrictHostKeyChecking=no -i /data/.ssh/czy-rsa -r artifact/* opsor@dsm.czy21-internal.com:/volume1/public/developer/linux/routeros/openwrt/

  deploy:
    runs-on: self-hosted
    needs: build
    if: inputs.first_build == false
    steps:
      - name: Deploy to release
        working-directory: /data/openwrt
        run: echo "release to"